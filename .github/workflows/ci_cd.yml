name: Laravel CI + Deploy

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "develop" ]
  workflow_dispatch:


permissions:
  contents: read

jobs:
  # --- CI com√∫n para todas las ramas ---
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout del c√≥digo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Cache de dependencias de Composer
      - name: Cache Composer dependencies
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      # 3Ô∏è‚É£ Instalar PHP
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          coverage: none
          extensions: mbstring, pdo, pdo_mysql, bcmath, intl

      # 4Ô∏è‚É£ Instalar dependencias PHP
      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist

      # 5Ô∏è‚É£ Cache de dependencias Node
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      # 6Ô∏è‚É£ Instalar Node y dependencias
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install JS dependencies
        run: npm ci

      # 7Ô∏è‚É£ Lint (opcional pero buena pr√°ctica)
      - name: Lint JavaScript
        run: npm run lint --if-present

      # 8Ô∏è‚É£ Compilar el frontend (verifica que no rompa el build)
      - name: Build frontend
        run: npm run build

      # 9Ô∏è‚É£ Preparar entorno Laravel para tests
      - name: Setup environment
        run: cp .env.example .env

      - name: Generate Laravel key
        run: php artisan key:generate

      # üîü Ejecutar tests (unitarios / feature)
      - name: Run tests
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: database/database.sqlite
        run: |
          mkdir -p database
          touch database/database.sqlite
          php artisan migrate --force
          php artisan test

  # --- Solo se ejecuta en main ---
  deploy:
    name: Deploy to FTP
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Reinstalamos dependencias sin dev para producci√≥n
      - name: Install PHP dependencies (production)
        run: composer install --no-dev --optimize-autoloader --no-interaction --prefer-dist

      - name: Install JS dependencies
        run: npm ci

      - name: Build frontend (production)
        run: npm run build

      - name: Laravel optimize
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      - name: Remove unnecessary files
        run: |
          rm -rf node_modules tests .github .git .gitignore README.md

      - name: Deploy via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASS }}
          server-dir: /public_html/tu_proyecto/
          local-dir: ./
          exclude: |
            **/.git*
            **/.github*
            **/node_modules/**
            **/tests/**
            **/storage/logs/**
